/*
 * Copyright (c) 2019, Chada Technologies. All rights reserved.
 * Chada PROPRIETARY/CONFIDENTIAL.
 */
package com.chada.ems.netty.decoder;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.LengthFieldBasedFrameDecoder;

import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.chada.ems.netty.ChannelPipelineInitializer.LENGTH_ADJUSTMENT;
import static com.chada.ems.netty.ChannelPipelineInitializer.LENGTH_FIELD_LENGTH;
import static com.chada.ems.netty.ChannelPipelineInitializer.LENGTH_FIELD_OFFSET;

/**
 * 不定长粘包解码器
 * 包的顺序不会出错是由底层tcp保证的，我们不用关系。
 *
 * @author Hua Wang
 * Created On: 2019/4/28 23:00
 */
@Deprecated
public class ChaLengthFieldBasedFrameDecoder extends LengthFieldBasedFrameDecoder {
    private static final Pattern GENERIC_PACKAG_LEN_PATTERN = Pattern.compile("^##" + "([0-9]{4})");
    private static final Pattern NEWLINE_PATTERN = Pattern.compile("(\r?\n)");

    @Override
    protected Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {
        return super.decode(ctx, in);
    }

    /*
    TCP 拆包粘包测试。
    下面的指令长度超过 1024 字节，客户端发送后，服务器端首次接收它需要读取两次 ByteBuf 缓存，因为 ByteBuf 首次大小未 1024，还未自动增加。
    如何将这两次的 package 粘在一起，对于潘安湖监控，很显然得用 LengthFieldBasedFrameDecoder 解码器，因为包的 header 部分指定了数据的长度。

    潘安湖监控指令包：
    ##1703ST=32;CN=3020;QN=20190424002722330;PW=123456;MN=23040281003022;Flag=5;CP=&&DataTime=20190424002000;DT=0;PolId=w01018;i11001-Info=//R:4e 26 26 45 30 34 31 0d 0a 23 23 30 30 37 36 53 54 3d 33 32 3b 43 4e 3d 32 30 31 31 3b 50 57 3d 3b 4d 4e 3d 3b 43 50 3d 26 26 44 61 74 61 54 69 6d 65 3d 32 30 31 38 31 32 32 35 30 38 30 30 30 30 3b 30 31 31 2d 52 74 64 3d 32 37 2e 33 2c 30 31 31 2d 46 6c 61 67 3d 4e 26 26 37 33 34 30 0d 0a 23 23 30 30 37 36 53 54 3d 33 32 3b 43 4e 3d 38 30 31 33 3b 50 57 3d 3b 4d 4e 3d 3b 43 50 3d 26 26 44 61 74 61 54 69 6d 65 3d 32 30 31 38 31 32 32 35 30 38 30 30 30 30 3b 30 31 31 2d 52 74 64 3d 32 37 2e 33 2c 30 31 31 2d 46 6c 61 67 3d 4e 26 26 45 30 34 31 0d 0a 23 23 30 30 37 36 53 54 3d 33 32 3b 43 4e 3d 32 30 31 31 3b 50 57 3d 3b 4d 4e 3d 3b 43 50 3d 26 26 44 61 74 61 54 69 6d 65 3d 32 30 31 38 31 32 32 35 30 38 30 30 30 30 3b 30 31 31 2d 52 74 64 3d 32 37 2e 33 2c 30 31 31 2d 46 6c 61 67 3d 4e 26 26 37 33 34 30 0d 0a 23 23 30 30 37 36 53 54 3d 33 32 3b 43 4e 3d 38 30 31 33 3b 50 57 3d 3b 4d 4e 3d 3b 43 50 3d 26 26 44 61 74 61 54 69 6d 65 3d 32 30 31 38 31 32 32 35 30 38 30 30 30 30 3b 30 31 31 2d 52 74 64 3d 32 37 2e 33 2c 30 31 31 2d 46 6c 61 67 3d 4e 26 26 45 30 34 31 0d 0a 23 23 30 30 37 36 53 54 3d 33 32 3b 43 4e 3d 32 30 31 31 3b 50 57 3d 3b 4d 4e 3d 3b 43 50 3d 26 26 44 61 74 61 54 69 6d 65 3d 32 30 31 38 31 32 32 35 30 38 30 30 30 30 3b 30 31 31 2d 52 74 64 3d 32 37 2e 33 2c 30 31 31 2d 46 6c 61 67 3d 4e 26 26 37 33 34 30 0d 0a 23 23 30 30 37 36 53 54 3d 33 32 3b 43 4e 3d 38 30 31 33 3b 50 57 3d 3b 4d 4e 3d 3b 43 50 3d 26 26 44 61 74 61 54 69 6d 65 3d 32 30 31 38 31 32 32 35 30 38 30 30 30 30 3b 30 31 31 2d 52 74 64 3d 32 37 2e 33 2c 30 31 01 //&&3B80
    对应的十六进制：
    23233137303353543D33323B434E3D333032303B514E3D32303139303432343030323732323333303B50573D3132333435363B4D4E3D32333034303238313030333032323B466C61673D353B43503D26264461746154696D653D32303139303432343030323030303B44543D303B506F6C49643D7730313031383B6931313030312D496E666F3D2F2F523A3465203236203236203435203330203334203331203064203061203233203233203330203330203337203336203533203534203364203333203332203362203433203465203364203332203330203331203331203362203530203537203364203362203464203465203364203362203433203530203364203236203236203434203631203734203631203534203639203664203635203364203332203330203331203338203331203332203332203335203330203338203330203330203330203330203362203330203331203331203264203532203734203634203364203332203337203265203333203263203330203331203331203264203436203663203631203637203364203465203236203236203337203333203334203330203064203061203233203233203330203330203337203336203533203534203364203333203332203362203433203465203364203338203330203331203333203362203530203537203364203362203464203465203364203362203433203530203364203236203236203434203631203734203631203534203639203664203635203364203332203330203331203338203331203332203332203335203330203338203330203330203330203330203362203330203331203331203264203532203734203634203364203332203337203265203333203263203330203331203331203264203436203663203631203637203364203465203236203236203435203330203334203331203064203061203233203233203330203330203337203336203533203534203364203333203332203362203433203465203364203332203330203331203331203362203530203537203364203362203464203465203364203362203433203530203364203236203236203434203631203734203631203534203639203664203635203364203332203330203331203338203331203332203332203335203330203338203330203330203330203330203362203330203331203331203264203532203734203634203364203332203337203265203333203263203330203331203331203264203436203663203631203637203364203465203236203236203337203333203334203330203064203061203233203233203330203330203337203336203533203534203364203333203332203362203433203465203364203338203330203331203333203362203530203537203364203362203464203465203364203362203433203530203364203236203236203434203631203734203631203534203639203664203635203364203332203330203331203338203331203332203332203335203330203338203330203330203330203330203362203330203331203331203264203532203734203634203364203332203337203265203333203263203330203331203331203264203436203663203631203637203364203465203236203236203435203330203334203331203064203061203233203233203330203330203337203336203533203534203364203333203332203362203433203465203364203332203330203331203331203362203530203537203364203362203464203465203364203362203433203530203364203236203236203434203631203734203631203534203639203664203635203364203332203330203331203338203331203332203332203335203330203338203330203330203330203330203362203330203331203331203264203532203734203634203364203332203337203265203333203263203330203331203331203264203436203663203631203637203364203465203236203236203337203333203334203330203064203061203233203233203330203330203337203336203533203534203364203333203332203362203433203465203364203338203330203331203333203362203530203537203364203362203464203465203364203362203433203530203364203236203236203434203631203734203631203534203639203664203635203364203332203330203331203338203331203332203332203335203330203338203330203330203330203330203362203330203331203331203264203532203734203634203364203332203337203265203333203263203330203331203031202F2F262633423830

     */

    /**
     * 由于数据包长度是十进制的，数字本身代表了数据段的长度，而非使用十六进制那种，因此我们需要自定义 frameLength，
     * 不能用 LengthFieldBasedFrameDecoder 默认的 getUnadjustedFrameLength。
     */
    @Override
    protected long getUnadjustedFrameLength(ByteBuf buf, int offset, int length, ByteOrder order) {
        String rawText = buf.toString(Charset.forName("utf-8"));

        Integer packageLength = getPackageLength(rawText);
        if (packageLength == null) {
            return rawText.length() - (LENGTH_FIELD_OFFSET + LENGTH_FIELD_LENGTH + LENGTH_ADJUSTMENT);
        } else {
            return packageLength;
        }

        //return super.getUnadjustedFrameLength(buf, offset, length, order);
    }


    public ChaLengthFieldBasedFrameDecoder(int maxFrameLength, int lengthFieldOffset, int lengthFieldLength) {
        super(maxFrameLength, lengthFieldOffset, lengthFieldLength);
    }

    public ChaLengthFieldBasedFrameDecoder(int maxFrameLength, int lengthFieldOffset, int lengthFieldLength, int lengthAdjustment, int initialBytesToStrip) {
        super(maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment, initialBytesToStrip);
    }

    public ChaLengthFieldBasedFrameDecoder(int maxFrameLength, int lengthFieldOffset, int lengthFieldLength, int lengthAdjustment, int initialBytesToStrip, boolean failFast) {
        super(maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment, initialBytesToStrip, failFast);
    }

    public ChaLengthFieldBasedFrameDecoder(ByteOrder byteOrder, int maxFrameLength, int lengthFieldOffset, int lengthFieldLength, int lengthAdjustment, int initialBytesToStrip, boolean failFast) {
        super(byteOrder, maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment, initialBytesToStrip, failFast);
    }

    public Integer getPackageLength(String rawText) {
        Integer result = null;

        Matcher matcher = GENERIC_PACKAG_LEN_PATTERN.matcher(rawText);
        while (matcher.find()) {
            String packageLength = matcher.group(1);
            result = Integer.parseInt(packageLength);
            break;
        }

        return result;
    }

    public int getNewlineLength(String rawText) {
        int result = 0;
        Matcher newlineMatcher = NEWLINE_PATTERN.matcher(rawText);
        if (newlineMatcher.find()) {
            String newline = newlineMatcher.group(1);
            if (newline.equals("\n")) {
                result += 1;
            } else if (newline.equals("\r\n")) {
                result += 2;
            }
        }

        return result;
    }
}
